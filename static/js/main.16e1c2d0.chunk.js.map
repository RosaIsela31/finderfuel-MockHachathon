{"version":3,"sources":["views/otherview.js","components/navbar/Navbar.js","components/map/CurrentLocation.js","components/map/Map.js","components/landing/Landing.js","views/LandingView.js","App.js","serviceWorker.js","index.js"],"names":["Otherview","className","Navbar","to","mapStyles","position","width","height","CurrentLocation","props","initialCenter","lat","lng","state","currentLocation","prevProps","prevState","google","this","loadMap","recenterMap","map","current","maps","center","LatLng","panTo","centerAroundCurrentLocation","navigator","geolocation","getCurrentPosition","pos","coords","setState","latitude","longitude","mapRef","refs","node","ReactDOM","findDOMNode","zoom","mapConfig","Object","assign","Map","children","React","Children","c","cloneElement","mapCenter","style","ref","renderChildren","Component","defaultProps","visible","MapContainer","showingInfoWindow","activeMarker","selectedPlace","onMarkerClick","marker","e","onClose","onClick","name","GoogleApiWrapper","apiKey","Landing","LandingView","App","exact","path","component","Boolean","window","location","hostname","match","render","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.16e1c2d0.chunk.js","sourcesContent":["import React from 'react'\n// import Sidebar from '../components/sidebar/Sidebar';\n\nconst Otherview = () => {\n  return (\n    <div className='other'>\n      {/* <Sidebar /> */}\n      this is otherview <br />\n      this is otherview <br />\n      this is otherview <br />\n    </div>\n  )\n}\n\nexport default Otherview;","import React from 'react'\nimport {Link} from 'react-router-dom';\nimport './style.css';\n\nconst Navbar = () => {\n  return (\n    <div className='navbar-container'>\n     <Link to={'/otherview'}>\n       <div className='foryou'>Info Para ti</div>\n       <div className='mechanical'>Talleres</div>\n       <div className='routes'>Rutas</div>\n     </Link>\n    </div>\n  )\n}\n\nexport default Navbar;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst mapStyles = {\n  map: {\n    position: 'absolute',\n    width: '50%',\n    height: '50%'\n  }\n};\n\nexport class CurrentLocation extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    const { lat, lng } = this.props.initialCenter;\n    this.state = {\n      currentLocation: {\n        lat: lat,\n        lng: lng\n      }\n    };\n    \n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevProps.google !== this.props.google) {\n      this.loadMap();\n    }\n    if (prevState.currentLocation !== this.state.currentLocation) {\n      this.recenterMap();\n    }\n  }\n\n  recenterMap() {\n    const map = this.map;\n    const current = this.state.currentLocation;\n\n    const google = this.props.google;\n    const maps = google.maps;\n\n    if (map) {\n      let center = new maps.LatLng(current.lat, current.lng);\n      map.panTo(center);\n    }\n  }\n\n  componentDidMount() {\n    if (this.props.centerAroundCurrentLocation) {\n      if (navigator && navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(pos => {\n          const coords = pos.coords;\n          this.setState({\n            currentLocation: {\n              lat: coords.latitude,\n              lng: coords.longitude\n            }\n          });\n        });\n      }\n    }\n    this.loadMap();\n  }\n\n  loadMap() {\n    if (this.props && this.props.google) {\n      // checks if google is available\n      const { google } = this.props;\n      const maps = google.maps;\n\n      const mapRef = this.refs.map;\n\n      // reference to the actual DOM element\n      const node = ReactDOM.findDOMNode(mapRef);\n\n      let { zoom } = this.props;\n      const { lat, lng } = this.state.currentLocation;\n      const center = new maps.LatLng(lat, lng);\n      const mapConfig = Object.assign(\n        {},\n        {\n          center: center,\n          zoom: zoom\n        }\n      );\n\n      // maps.Map() is constructor that instantiates the map\n      this.map = new maps.Map(node, mapConfig);\n    }\n  }\n\n  renderChildren() {\n    const { children } = this.props;\n\n    if (!children) return;\n\n    return React.Children.map(children, c => {\n      if (!c) return;\n      return React.cloneElement(c, {\n        map: this.map,\n        google: this.props.google,\n        mapCenter: this.state.currentLocation\n      });\n    });\n  }\n\n  render() {\n    const style = Object.assign({}, mapStyles.map);\n   return (\n     <div>\n       <div style={style} ref=\"map\">\n         Loading map...\n       </div>\n       {this.renderChildren()}\n     </div>\n   );\n }\n\n\n}\n\nexport default CurrentLocation;\n\nCurrentLocation.defaultProps = {\n  zoom: 14,\n  initialCenter: {\n    lat: -1.2884,\n    lng: 36.8233\n  },\n  centerAroundCurrentLocation: false,\n  visible: true\n};","import React, { Component } from 'react';\nimport { GoogleApiWrapper, InfoWindow, Marker } from 'google-maps-react';\n\nimport CurrentLocation from './CurrentLocation';\n\nexport class MapContainer extends Component {\n  state = {\n    showingInfoWindow: false,\n    activeMarker: {},\n    selectedPlace: {}\n  };\n\n  onMarkerClick = (props, marker, e) =>\n    this.setState({\n      selectedPlace: props,\n      activeMarker: marker,\n      showingInfoWindow: true\n    });\n\n  onClose = props => {\n    if (this.state.showingInfoWindow) {\n      this.setState({\n        showingInfoWindow: false,\n        activeMarker: null\n      });\n    }\n  };\n\n  render() {\n    return (\n      <CurrentLocation\n        centerAroundCurrentLocation\n        google={this.props.google}\n      >\n        <Marker onClick={this.onMarkerClick} name={'current location'} />\n        <InfoWindow\n          marker={this.state.activeMarker}\n          visible={this.state.showingInfoWindow}\n          onClose={this.onClose}\n        >\n          <div>\n            <h4>{this.state.selectedPlace.name}</h4>\n          </div>\n        </InfoWindow>\n      </CurrentLocation>\n    );\n  }\n}\n\nexport default GoogleApiWrapper({\n  apiKey: 'AIzaSyAebXFF8h-t7eN5aft9vC0qpndBTKr5tfY'\n})(MapContainer);","import React from 'react'\nimport './style.css';\nimport MapContainer from '../map/Map';\n\nexport const Landing = () => {\n  return (\n    <div className='landing'>\n      <MapContainer />\n      \n    </div>\n  )\n}\n\nexport default Landing;","import React from 'react'\nimport Navbar from '../components/navbar/Navbar'\nimport Landing from '../components/landing/Landing';\n\n\nconst LandingView = () => {\n  return (\n    <div>\n      <Navbar />\n      <Landing />\n    </div>\n  )\n}\n\nexport default LandingView;","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\nimport Otherview from './views/otherview';\nimport Landing from './views/LandingView';\n\nimport './App.css';\n\nclass App extends Component {\n  render(){\n    return(\n      <div>\n        <Router>\n           <Switch>\n              <Route exact path='/' component={Landing} />\n              <Route exact path='/otherview' component={Otherview} />\n           </Switch>\n        </Router>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}