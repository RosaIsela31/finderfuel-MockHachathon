{"version":3,"sources":["views/otherview.js","views/Landing.js","components/sidebar/HeaderToolbar.js","components/sidebar/Sidebar.js","App.js","serviceWorker.js","index.js"],"names":["Otherview","className","Landing","to","DrawerToggleButton","props","onClick","click","header","drawerClickHandler","SideDrawer","drawerClasses","show","join","Backdrop","toolbar","state","sideDrawerOpen","drawerToggleClickHandler","setState","prevState","backdropClickHandler","backdrop","this","style","height","HeaderToolbar","Component","App","Sidebar","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oWAWeA,G,MARU,WACvB,OACE,yBAAKC,UAAU,SAAf,uBCYWC,EAXQ,WACrB,OACE,yBAAKD,UAAU,WAAf,kBAEE,kBAAC,IAAD,CAAME,GAAG,cAAT,mBCPAC,G,MAAqB,SAAAC,GAAK,OAC9B,4BAAQJ,UAAU,gBAAgBK,QAASD,EAAME,OAC/C,yBAAKN,UAAU,wBACf,yBAAKA,UAAU,wBACf,yBAAKA,UAAU,2BAcJO,EAVA,SAAAH,GAAK,OAClB,4BAAQJ,UAAU,WAChB,yBAAKA,UAAU,uBACb,6BACE,kBAAC,EAAD,CAAoBM,MAAOF,EAAMI,yBCRnCC,EAAa,SAAAL,GACjB,IAAIM,EAAgB,CAAC,eAIrB,OAHGN,EAAMO,OACPD,EAAgB,CAAC,qBAGjB,yBAAKV,UAAWU,EAAcE,KAAK,KAC9B,kBAAC,IAAD,KACC,4BACE,4BAAI,kBAAC,IAAD,CAAMV,GAAI,cAAV,gCAQVW,EAAW,SAAAT,GAAK,OACpB,yBAAKJ,UAAU,WAAWK,QAAWD,EAAME,SAkC9BQ,E,2MA7BbC,MAAQ,CACNC,gBAAgB,G,EAGlBC,yBAA2B,WACxB,EAAKC,UAAS,SAACC,GACb,MAAM,CAACH,gBAAiBG,EAAUH,oB,EAIvCI,qBAAuB,WACrB,EAAKF,SAAS,CAACF,gBAAgB,K,wEAG7B,IAAIK,EAIJ,OAHGC,KAAKP,MAAMC,iBACZK,EAAW,kBAAC,EAAD,CAAUf,MAAOgB,KAAKF,wBAGjC,yBAAKG,MAAO,CAACC,OAAQ,SACrB,kBAACC,EAAD,CAAgBjB,mBAAoBc,KAAKL,2BACzC,kBAAC,EAAD,CAAYN,KAAMW,KAAKP,MAAMC,iBAC5BK,O,GAvBaK,aCLPC,G,uLAdX,OACE,6BACE,kBAACC,EAAD,MACA,kBAAC,IAAD,KACC,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAW9B,IAC/B,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO4B,OAAK,EAACC,KAAK,aAAaC,UAAWhC,W,GARrC2B,cCIEM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.0942c8d6.chunk.js","sourcesContent":["import React from 'react'\nimport './otherview.css';\n\nexport const Otherview = () => {\n  return (\n    <div className='other'>\n      this is otherview\n    </div>\n  )\n}\n\nexport default Otherview;","import React from 'react'\nimport { Link } from 'react-router-dom';\n\n\nimport './otherview.css';\n\nexport const Landing = () => {\n  return (\n    <div className='landing'>\n      this is landing\n      <Link to='/otherview'>\n           TogetherClick \n      </Link>\n    </div>\n  )\n}\n\nexport default Landing;","import React from 'react';\nimport './Style.scss';\n\nconst DrawerToggleButton = props => (\n  <button className=\"toggle-button\" onClick={props.click}> \n    <div className=\"toggle-button__line\"/>\n    <div className=\"toggle-button__line\"/>\n    <div className=\"toggle-button__line\"/> \n  </button>\n);\n\nconst header = props => (\n  <header className=\"toolbar\">\n    <nav className=\"toolbar__navigation\">\n      <div> \n        <DrawerToggleButton click={props.drawerClickHandler}/>\n      </div>\n    </nav>\n  </header>\n);\n\nexport default header;","import React, {Component} from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\nimport {Link} from 'react-router-dom';\nimport './Style.scss';\nimport HeaderToolbar from './HeaderToolbar.js'\n\n\nconst SideDrawer = props => {\n  let drawerClasses = ['side-drawer'];\n  if(props.show){\n    drawerClasses = ['side-drawer open'];\n  }\n  return (\n    <nav className={drawerClasses.join('')}>\n         <Router>\n          <ul>\n            <li><Link to={'/otherview'}>Talleres Cerca de MÃ­</Link></li>\n          </ul>\n         </Router>\n     </nav>\n    );\n};\n\n\nconst Backdrop = props => (\n  <div className=\"backdrop\" onClick = {props.click}/>\n);\n\n\nclass toolbar extends Component {\n  state = {\n    sideDrawerOpen: false\n  };\n\n  drawerToggleClickHandler = () => {\n     this.setState((prevState) => {\n       return{sideDrawerOpen: !prevState.sideDrawerOpen}\n     });\n  };\n\n  backdropClickHandler = () => {\n    this.setState({sideDrawerOpen: false});\n  };\n    render() {\n      let backdrop;\n      if(this.state.sideDrawerOpen){\n        backdrop = <Backdrop click={this.backdropClickHandler}/>;\n      }\n      return (\n        <div style={{height: '100%'}}>\n        <HeaderToolbar  drawerClickHandler={this.drawerToggleClickHandler}/>\n        <SideDrawer show={this.state.sideDrawerOpen}/>\n        {backdrop}\n        </div>  \n      )\n    }\n  }\n\n\nexport default toolbar;\n\n\n\n\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\nimport Otherview from './views/otherview';\nimport Landing from './views/Landing'\nimport Sidebar from './components/sidebar/Sidebar'\n\nimport './App.css';\n\nclass App extends Component {\n  render(){\n    return(\n      <div>\n        <Sidebar />\n        <Router>\n         <Route exact path='/' component={Landing} />\n           <Switch>\n             <Route exact path='/otherview' component={Otherview} />\n           </Switch>\n        </Router>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}